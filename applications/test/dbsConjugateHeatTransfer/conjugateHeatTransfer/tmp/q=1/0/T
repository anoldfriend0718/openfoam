/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];

internalField   uniform 300;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           $internalField;
    }


    outlet
    {
        type            zeroGradient;
    }

    // "(top|bottom)" //need to change the bottom 
    // {
    //     type            zeroGradient;
    // }

    top
    {
        type            zeroGradient;
    }

    bottom
    {
        type            fixedGradient;
        gradient        #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

    	    //libs needed to visualize BC in paraview
    	    codeLibs
    	    #{
                -lmeshTools \
                -lfiniteVolume
    	    #};

            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		        (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("bottom");
                const fvPatch& patch = mesh.boundary()[id];
                
                scalarField gradT(patch.size(), 0.0);
                const label numBlock=5;
                const scalar lin=0.04;
                const scalar w=0.005;
                const scalar s=0.005;
                const scalar inv=w+s;
                const scalar ladal=20;
                const scalar q=1;
                for(label i=0;i<numBlock;i++)
                {
                    const scalar start=lin+i*inv;
                    const scalar end=start+w;
                    forAll(gradT,i)
                    {
                        const scalar x=patch.Cf()[i][0];
                        if(x>start && x<end)
                        {
                            gradT[i]=q/ladal;
                        }
                    }
                }
                
                writeEntry(os, "", gradT);
            #};
        };
    }

    frontAndBack
    {
        type            empty;
    }
    
}

// ************************************************************************* //
