/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    
    outlet
    {
        type            zeroGradient;
    }

    "(top|bottom)"
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    inlet
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

    	    //libs needed to visualize BC in paraview
    	    codeLibs
    	    #{
                -lmeshTools \
                -lfiniteVolume
    	    #};

            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		        (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("inlet");
                const fvPatch& patch = mesh.boundary()[id];
                

                //vectorField U(mesh.boundary()[id].size(), vector(0, 0, 0));
                vectorField U(patch.size(), vector(0, 0, 0));

                const scalar pi = constant::mathematical::pi;
                const scalar U_0   = 0.3;	//max vel //Re~0.1
		        const scalar p_ctr = 0.01;	//patch center
                const scalar p_r   = 0.01;	//patch radius

                forAll(U, i)
                {
                    const scalar y = patch.Cf()[i][1];
                    //U[i] = vector(U_0*sin(pi*y/r), 0., 0.);
                    U[i] = vector(U_0*(1-(pow(y - p_ctr,2))/(p_r*p_r)), 0., 0.);
                }


                //for (int i; i<patch.size() ; i++)
                //{
                //    const scalar y = patch.Cf()[i][1];
                //    U[i] = vector(U_0*(1-(pow(y - p_ctr,2))/(p_r*p_r)), 0., 0.);
                //}


                writeEntry(os, "", U);
            #};
        };
    }


    frontAndBack
    {
        type            empty;
    }
}


// ************************************************************************* //
