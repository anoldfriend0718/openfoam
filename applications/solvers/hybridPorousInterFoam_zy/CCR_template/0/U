/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{

    top
    {
        //type      zeroGradient;  
        type      cyclic;
    }

    bottom
    {
        //type            zeroGradient;
        type      cyclic;
    }

    left
    {
        type            fixedValue;
        value           uniform (0.0002 0 0);
    }

/*
//========================================================

    left
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

    	    //libs needed to visualize BC in paraview
    	    codeLibs
    	    #{
                -lmeshTools \
                -lfiniteVolume
    	    #};

            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		        (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("left");
                const fvPatch& patch = mesh.boundary()[id];
                
                //vectorField U(mesh.boundary()[id].size(), vector(0, 0, 0));
                vectorField U(patch.size(), vector(0, 0, 0));

                const scalar U_0   = 0.0001;	//max vel //Re~0.1
                const scalar H = 120e-6; //inlet width

                forAll(U, i)
                {
                    const scalar y = patch.Cf()[i][1];
                    const scalar yr = y/H;
                    U[i] = vector(6*U_0*yr*(1-yr), 0., 0.);
                }

                writeEntry(os, "", U);
            #};
        };
    }

//========================================================
*/

    right
    {
        type            zeroGradient;
    }

    FrontAndBack
    {
        type            empty;
    }
}


// ************************************************************************* //
